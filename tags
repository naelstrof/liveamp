!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddImage	NTexture.cpp	/^int NTexture::Animation::AddImage(GLuint ImageID)$/;"	f	class:NTexture::Animation
AmpID	main.cpp	/^static GLuint AmpID;$/;"	v	file:
Animation	NTexture.h	/^	class Animation $/;"	c	namespace:NTexture
AnimationCount	NTexture.h	/^		unsigned int AnimationCount;$/;"	m	class:NTexture::Texture
AnimationID	NTexture.h	/^		unsigned int AnimationID;$/;"	m	class:NTexture::Texture
Animations	NTexture.h	/^		Animation* Animations;$/;"	m	class:NTexture::Texture
Apply	NTexture.cpp	/^int NTexture::Texture::Apply()$/;"	f	class:NTexture::Texture
Buffer	NPulse.h	/^	short* Buffer;$/;"	m	class:NPulse
BufferSize	NPulse.h	/^	unsigned int BufferSize;$/;"	m	class:NPulse
ChangedSize	NWindow.cpp	/^bool NWindow::ChangedSize(unsigned int* Width, unsigned int* Height)$/;"	f	class:NWindow
CheckFiles	main.cpp	/^int CheckFiles()$/;"	f
CleanUp	NTexture.cpp	/^int NTexture::CleanUp()$/;"	f	class:NTexture
Close	NWindow.cpp	/^int NWindow::Close()$/;"	f	class:NWindow
ColorID	main.cpp	/^static GLuint ColorID;$/;"	v	file:
Connected	NPulse.h	/^	bool Connected;$/;"	m	class:NPulse
DESTDIR	makefile	/^DESTDIR=$/;"	m
DrawFullscreenQuad	main.cpp	/^int DrawFullscreenQuad(NTexture::Texture texture, float Amp, float r, float g, float b)$/;"	f
GL_GLEXT_PROTOTYPES	NShaderManager.h	9;"	d
GL_GLEXT_PROTOTYPES	NTexture.h	10;"	d
GL_GLEXT_PROTOTYPES	NWindow.h	5;"	d
GL_GLEXT_PROTOTYPES	main.cpp	29;"	d	file:
GetAmp	NPulse.cpp	/^float NPulse::GetAmp()$/;"	f	class:NPulse
GetFPS	NTexture.cpp	/^float NTexture::Animation::GetFPS()$/;"	f	class:NTexture::Animation
GetKey	NWindow.cpp	/^unsigned int NWindow::GetKey()$/;"	f	class:NWindow
Height	main.cpp	/^static unsigned int Height = 0;$/;"	v	file:
HeightSize	main.cpp	/^static GLuint HeightSize;$/;"	v	file:
ID	NTexture.h	/^		unsigned int ID;$/;"	m	class:NTexture::Texture
INSTALLDIR	makefile	/^INSTALLDIR=opt\/liveamp$/;"	m
ImageCount	NTexture.h	/^		unsigned int ImageCount;$/;"	m	class:NTexture::Animation
Images	NTexture.h	/^		GLuint* Images;$/;"	m	class:NTexture::Animation
LoadPngImage	NTexture.cpp	/^GLuint NTexture::Texture::LoadPngImage(const char* name) \/\/Shamelessly stolen from a random website explaining how to use libpng$/;"	f	class:NTexture::Texture
LoadShaders	NShaderManager.cpp	/^GLuint LoadShaders(const char* VertexFilePath, const char* FragmentFilePath, bool* Result)$/;"	f
MAX_BUFFER	NPulse.h	8;"	d
MaxFPS	main.cpp	/^static unsigned int MaxFPS = 60;$/;"	v	file:
NAELSTROF_SHADER_MANAGER	NShaderManager.h	2;"	d
NAELSTROF_TEXTURE	NTexture.h	2;"	d
NAELSTROF_WINDOW	NWindow.h	2;"	d
NPulse	NPulse.cpp	/^NPulse::NPulse()$/;"	f	class:NPulse
NPulse	NPulse.h	/^class NPulse$/;"	c
NTexture	NTexture.h	/^namespace NTexture$/;"	n
NWindow	NWindow.cpp	/^NWindow::NWindow(unsigned int* Width, unsigned int* Height, const char* Name, bool Desktop, int argc, char** argv)$/;"	f	class:NWindow
NWindow	NWindow.h	/^class NWindow$/;"	c
Name	NTexture.h	/^		char Name[128];$/;"	m	class:NTexture::Texture
Name	NTexture.h	/^		char* Name;$/;"	m	class:NTexture::Animation
Open	NWindow.cpp	/^int NWindow::Open()$/;"	f	class:NWindow
PI	main.cpp	43;"	d	file:
Play	NTexture.cpp	/^int NTexture::Texture::Play(const char* name)$/;"	f	class:NTexture::Texture
PrintVersion	NPulse.cpp	/^int NPulse::PrintVersion()$/;"	f	class:NPulse
ProgramID	main.cpp	/^static GLuint ProgramID;$/;"	v	file:
QUALITY	NPulse.h	9;"	d
ReadArguments	main.cpp	/^int ReadArguments(int argc, char** argv, bool* Desktop, unsigned int* Width, unsigned int* Height, unsigned int* MaxFPS)$/;"	f
Reload	NPulse.cpp	/^int NPulse::Reload()$/;"	f	class:NPulse
RememberTime	main.cpp	/^static timespec WaitTime, RememberTime;$/;"	v	file:
SetFPS	NTexture.cpp	/^int NTexture::Animation::SetFPS(float NewFPS)$/;"	f	class:NTexture::Animation
SetName	NTexture.cpp	/^int NTexture::Animation::SetName(const char* NewName)$/;"	f	class:NTexture::Animation
SoundSocket	NPulse.h	/^	pa_simple* SoundSocket;$/;"	m	class:NPulse
StartTime	NTexture.h	/^		timeval StartTime;$/;"	m	class:NTexture::Texture
Static	NTexture.h	/^		bool Static;$/;"	m	class:NTexture::Texture
SwapBuffer	NWindow.cpp	/^int NWindow::SwapBuffer()$/;"	f	class:NWindow
Texture	NTexture.cpp	/^NTexture::Texture::Texture()$/;"	f	class:NTexture::Texture
Texture	NTexture.cpp	/^NTexture::Texture::Texture(const char* name)$/;"	f	class:NTexture::Texture
Texture	NTexture.h	/^	class Texture$/;"	c	namespace:NTexture
TextureID	NTexture.h	/^		GLuint TextureID;$/;"	m	class:NTexture::Texture
TextureIDs	NTexture.h	/^	static std::vector<GLuint> TextureIDs;$/;"	m	namespace:NTexture
TextureNames	NTexture.h	/^	static std::vector<char*> TextureNames;$/;"	m	namespace:NTexture
Textures	NTexture.h	/^	static std::vector<Texture> Textures;$/;"	m	namespace:NTexture
UVBuffer	main.cpp	/^static GLuint UVBuffer;$/;"	v	file:
UniformID	main.cpp	/^static GLuint UniformID;$/;"	v	file:
Valid	NTexture.h	/^		bool Valid;$/;"	m	class:NTexture::Texture
Valid	NWindow.h	/^	bool Valid;$/;"	m	class:NWindow
Verbose	NTexture.h	/^	static bool Verbose = true;$/;"	m	namespace:NTexture
VertexBuffer	main.cpp	/^static GLuint VertexBuffer;$/;"	v	file:
WaitTime	main.cpp	/^static timespec WaitTime, RememberTime;$/;"	v	file:
Width	main.cpp	/^static unsigned int Width = 0;$/;"	v	file:
WidthSize	main.cpp	/^static GLuint WidthSize;$/;"	v	file:
dpy	NWindow.h	/^	Display *dpy;$/;"	m	class:NWindow
fps	NTexture.h	/^		unsigned int fps;$/;"	m	class:NTexture::Animation
fps	main.cpp	/^static int fps;$/;"	v	file:
glc	NWindow.h	/^	GLXContext glc;$/;"	m	class:NWindow
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
newtime	main.cpp	/^timeval oldtime, newtime, starttime;$/;"	v
oldtime	main.cpp	/^timeval oldtime, newtime, starttime;$/;"	v
sighandler	main.cpp	/^void sighandler(int signum)$/;"	f
starttime	main.cpp	/^timeval oldtime, newtime, starttime;$/;"	v
stof	NPulse.cpp	/^float NPulse::stof(short* Buffer, unsigned int Finder)$/;"	f	class:NPulse
win	NWindow.h	/^	Window win;$/;"	m	class:NWindow
wmDeleteMessage	NWindow.h	/^	Atom wmDeleteMessage;$/;"	m	class:NWindow
~Animation	NTexture.cpp	/^NTexture::Animation::~Animation()$/;"	f	class:NTexture::Animation
~NPulse	NPulse.cpp	/^NPulse::~NPulse()$/;"	f	class:NPulse
~Texture	NTexture.cpp	/^NTexture::Texture::~Texture()$/;"	f	class:NTexture::Texture
